# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ApnLnq5VzyaamyXyBdKH3_M7supzTsoA
"""

import numpy as np
import matplotlib.pyplot as plt

# Define the payoff matrices
android_payoffs = np.array([[5, 5], [7, 3]])
ios_payoffs = np.array([[3, 7], [3, 3]])

# Define the strategies
always_android = np.array([1, 0])
always_ios = np.array([0, 1])
tit_for_tat = np.array([1, 1])
random_choice = np.array([0.5, 0.5])
grim_trigger = np.array([1, 0])

# Define the function to calculate the total payoff
def get_total_payoff(strategy1, strategy2, payoffs1, payoffs2):
    payoff1 = np.dot(strategy1, payoffs1.dot(strategy2))
    payoff2 = np.dot(strategy2, payoffs2.dot(strategy1))
    return payoff1, payoff2

# Define the function to simulate the game
def simulate_game(strategy1, strategy2, payoffs1, payoffs2, num_rounds):
    total_payoffs1 = []
    total_payoffs2 = []
    for i in range(num_rounds):
        payoff1, payoff2 = get_total_payoff(strategy1, strategy2, payoffs1, payoffs2)
        total_payoffs1.append(payoff1)
        total_payoffs2.append(payoff2)
        # Update the strategies for the next round
        if i > 0:
            last_play1 = strategy1[-1]
            last_play2 = strategy2[-1]
            strategy1 = np.append(strategy1[1:], last_play2)
            strategy2 = np.append(strategy2[1:], last_play1)
    return total_payoffs1, total_payoffs2

# Define the function to plot the results
def plot_results(total_payoffs1, total_payoffs2):
    plt.plot(total_payoffs1, label='android')
    plt.plot(total_payoffs2, label='ios')
    plt.xlabel('Round')
    plt.ylabel('Total Payoff')
    plt.legend()
    plt.show()

# Simulate the game using different strategies
num_rounds = 10
total_payoffs = []
strategies = [always_android, always_ios, tit_for_tat, random_choice, grim_trigger]
for strategy in strategies:
    total_payoffs1, total_payoffs2 = simulate_game(strategy, tit_for_tat, android_payoffs, ios_payoffs, num_rounds)
    total_payoff = sum(total_payoffs1 + total_payoffs2)
    total_payoffs.append(total_payoff)
    plot_results(total_payoffs1, total_payoffs2)

# Plot the results
plt.bar(range(len(strategies)), total_payoffs)
plt.xticks(range(len(strategies)), ['Always Cooperate', 'Always Defect', 'Tit-for-Tat', 'Random Choice', 'Grim Trigger'])
plt.xlabel('Strategy')
plt.ylabel('Total Payoff')
plt.show()



"""# New section"""